// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.0.x"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model User {
  id                          String                        @id @default(cuid())
  name                        String?
  password                    String?
  email                       String?                       @unique
  emailVerified               DateTime?
  image                       String?
  accounts                    Account[]
  sessions                    Session[]
  UserResponses               UserResponses[]
  ModelQuestionResponseResult ModelQuestionResponseResult[]
  UserCareers                 UserCareers[]
  UserActionItems             UserActionItems[]
  Analytics                   Analytics[]
  Role                        Role?                         @relation(fields: [roleId], references: [id])
  roleId                      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([roleId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserResponses {
  id        String             @id @default(cuid())
  userId    String?
  user      User?              @relation(fields: [userId], references: [id])
  uid       String             @unique
  responses QuestionResponse[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  @@index([userId])
}

model QuestionResponse {
  id            String                        @id @default(cuid())
  response      String
  questionId    String
  question      Question                      @relation(fields: [questionId], references: [id])
  responseId    String
  userResponse  UserResponses                 @relation(fields: [responseId], references: [id])
  ModelResponse ModelQuestionResponseResult[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([questionId])
  @@index([responseId])
}

model ModelQuestionResponseResult {
  id                 String           @id @default(cuid())
  questionResponseId String           @unique
  created_at         DateTime         @default(now())
  QuestionResponse   QuestionResponse @relation(fields: [questionResponseId], references: [id])
  response           Json
  result             Json
  user               User?            @relation(fields: [userId], references: [id])
  userId             String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([questionResponseId])
  @@index([userId])
}

model Question {
  id               String             @id @default(cuid())
  category         String
  order            Int
  question         String             @unique
  type             String
  min              Int?
  max              Int?
  QuestionResponse QuestionResponse[]
  Quiz             Quiz?              @relation(fields: [quizId], references: [id])
  quizId           String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([quizId])
}

model Careers {
  id              String        @id @default(cuid())
  name            String        @unique
  description     String
  salaryMin       Int
  salaryMax       Int
  retrainingWeeks Int
  UserCareers     UserCareers[]
  ActionItems     ActionItems[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserCareers {
  id            String   @id @default(cuid())
  userId        String
  careerId      String
  affinityScore Float
  matchScore    Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id])
  career Careers @relation(fields: [careerId], references: [id])

  @@index([userId])
  @@index([careerId])
}

model ActionItems {
  id          String @id @default(cuid())
  careerId    String
  description String
  itemType    String

  career          Careers           @relation(fields: [careerId], references: [id])
  UserActionItems UserActionItems[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([careerId])
}

model UserActionItems {
  id           String   @id @default(cuid())
  userId       String
  actionItemId String
  status       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user       User        @relation(fields: [userId], references: [id])
  actionItem ActionItems @relation(fields: [actionItemId], references: [id])

  @@index([userId])
  @@index([actionItemId])
}

model Analytics {
  id        String   @id @default(cuid())
  userId    String?
  eventType String
  eventDate DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Role {
  id              String            @id @default(cuid())
  name            String            @unique
  description     String?
  users           User[]
  RolePermissions RolePermissions[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([id])
}

model Permission {
  id              String            @id @default(cuid())
  name            String            @unique
  description     String?
  RolePermissions RolePermissions[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RolePermissions {
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
}

model Quiz {
  id          String     @id @default(cuid())
  title       String
  description String?
  questions   Question[]
  resources   Resource[] // One-to-many relationship with Resource
  tasks       Task[] // One-to-many relationship with Task
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime?
  quiz        Quiz?     @relation(fields: [quizId], references: [id])
  quizId      String? // Foreign key for Quiz
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([quizId])
}

model Resource {
  id          String   @id @default(cuid())
  title       String
  description String?
  type        String // "article", "video", "downloadable_material", etc.
  url         String?
  quiz        Quiz?    @relation(fields: [quizId], references: [id])
  quizId      String? // Foreign key for Quiz
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([quizId])
}
