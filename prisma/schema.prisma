// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  UserResponses UserResponses[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserResponses {
  id         String             @id @default(cuid())
  userId     String?
  user       User?              @relation(fields: [userId], references: [id])
  uid        String             @unique
  responses  QuestionResponse[]
  created_at DateTime           @default(now())

  @@index([userId])
}

model QuestionResponse {
  id            String                        @id @default(cuid())
  response      String
  questionId    String
  question      Question                      @relation(fields: [questionId], references: [id])
  responseId    String
  userResponse  UserResponses                 @relation(fields: [responseId], references: [id])
  ModelResponse ModelQuestionResponseResult[]

  @@index([questionId])
  @@index([responseId])
}

model ModelQuestionResponseResult {
  id                 String           @id @default(cuid())
  questionResponseId String           @unique
  created_at         DateTime         @default(now())
  QuestionResponse   QuestionResponse @relation(fields: [questionResponseId], references: [id])
  response           Json
  result             Json

  @@index([questionResponseId])
}

model Question {
  id               String             @id @default(cuid())
  category         String
  order            Int
  question         String             @unique
  type             String
  min              Int?
  max              Int?
  QuestionResponse QuestionResponse[]
}

model Careers {
  id              String @id @default(cuid())
  name            String @unique
  description     String
  salaryMin       Int
  salaryMax       Int
  retrainingWeeks Int
}
